* USE SPACES INSTEAD OF TABS.
* Read linting errors and _avoid making new_ linting errors, but don't fix existing linting errors until all tests pass.
* This Python 3 project has a `./.venv` virtual environment that was created with `uv`.
* We use `unittest` for unit tests. Create a unit test for each function and run the unit test.
* Try to limit file size to about 100 lines.
    * If they go over that size, parse functions out to other files.
* use the repo remote address `github.com:bizkite-co/git-retrospector` to determine the repo name and owner.
* Use the GitHub MCP to read, add, and update GitHub issues on this repo.
* Comments on progress should be added as comments on the Issue, not as edits to the issue.
* Be sure to set the Issue Type: [Featur, Bug, Task], depending on it's type.
* Add the issues to the "Git Retro" project with `--owner bizkite-co`.
* Add the Issue to the project by switching to Code mode and executing a command of this format:
    `gh project item-add 3 --url https://github.com/bizkite-co/git-retrospector/issues/<issue number> --owner bizkite-co`
* Use the GH Project Number, not the ID, to refer to the project.
* gh project list --owner bizkite-co
    NUMBER  TITLE                 STATE  ID
    3       Git Retro             open   PVT_kwDOBVBs1c4Ay6ev
* Use the GitHub CLI for GitHub actions not available in the MCP.
* When the Issue is complete and the user agrees, create commit with a multi-line commit message starting with `fix #<issue number>`. That will close the issue.
* Use modern Python best practices as much as possible.
* Suggest Python best practices improvements.
* Use industry standard best practice coding standards and file structure and naming conventions.
* Try to apply type hints and type safety tools like Pydantic.
* Prefer unit tests over logging wherever possible.
* Break problems down into smaller problems until you can find the tiny problem that's causeing the bigger problems.
